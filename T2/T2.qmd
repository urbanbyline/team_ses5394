---
title: "T2: Trip generation"
format: 
  html:
    theme: minty
    toc: true
    toc-location: left
editor: visual
---

The purpose of this assignment is for you to

-   Familiarize your self with the inputs to the Boston Region Metropolitan Planning Organization's regional travel demand model ([TDM23](https://www.ctps.org/travel-demand-model)),

-   Run the trip generation step of TDM23 for both the existing (2019) condition and an alternative you've developed (it could be the same one you used for T1, or a new one), and

-   Identify changes in trip productions and attractions that result from your alternative scenario.

## Load libraries

This analysis uses the following packages:

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
library(maptiles)
library(tidyterra)
library(knitr)
library(tigris)
library(dplyr)
library(viridis)
library(ggplot2)

sf::sf_use_s2(FALSE)
```

## Compare scenario results

```{r}

base_db <- dbConnect(drv=RSQLite::SQLite(), 
                     dbname=here("model",
                                 "outputs",
                                 "Base",
                                 "tdm23.db"))
```

```{r}
base_tables <- dbListTables(base_db)
print(base_tables)

```

```{r}

base_trip_prod <- dbGetQuery(base_db, 'SELECT * FROM trip_prod')

dbDisconnect(base_db)

head(base_trip_prod) |>
  kable()
```

```{r}
base_work_prod <- base_trip_prod |>
  filter(is.na(hbsr_p)) |>
  select(hid, 
         block_id,
         person_num,
         hbw_p,
         nhbw_p)

head(base_work_prod) |>
  kable()
```

#### Definitions:

Home Based Work Trips - HBW_P - person level

Non-Home Based Work Trips - NHWB_P - person level

home-based school trips - HBSC_P household level

home-based social/recreational trips - HBSR_P - household level

home-based personal business - HBPB_P - household level

non-home-based-non-work trips - NHBHW_P - household level

```{r}
base_non_work_prod <- base_trip_prod |>
  filter(is.na(hbw_p)) |>
  select(hid, 
         block_id,
         person_num,
         hbsc_p,
         hbsr_p,
         hbpb_p,
         nhbnw_p)

head(base_non_work_prod) |>
  kable()

```

```{r}

base_block_prod <- base_trip_prod |>
  replace_na(list(hbw_p = 0,
                  hbsc_p = 0,
                  hbsr_p = 0,
                  hbpb_p = 0,
                  nhbw_p = 0,
                  nhbnw_p = 0)) |>
  group_by(block_id) |>
  summarise(hbw_p = sum(hbw_p),
            hbsc_p = sum(hbsc_p),
            hbsr_p = sum(hbsr_p),
            hbpb_p = sum(hbpb_p),
            nhbw_p = sum(nhbw_p),
            nhbnw_p = sum(nhbnw_p))

head(base_block_prod) |>
  kable()

base_block_averages <- base_block_prod %>%
  summarise(across(c(hbw_p, hbsc_p, hbsr_p, hbpb_p, nhbw_p, nhbnw_p), mean, na.rm = TRUE))

print(base_block_averages)
```

Now let's look at the alternative case.

```{r}

alt_db <- dbConnect(drv=RSQLite::SQLite(), 
                     dbname=here("model",
                                 "outputs",
                                 "UBI-1",
                                 "tdm23.db"))

alt_trip_prod <- dbGetQuery(alt_db, 'SELECT * FROM trip_prod')

dbDisconnect(alt_db)

alt_block_prod <- alt_trip_prod |>
  replace_na(list(hbw_p = 0,
                  hbsc_p = 0,
                  hbsr_p = 0,
                  hbpb_p = 0,
                  nhbw_p = 0,
                  nhbnw_p = 0)) |>
  group_by(block_id) |>
  summarise(hbw_p_alt = sum(hbw_p),
            hbsc_p_alt = sum(hbsc_p),
            hbsr_p_alt = sum(hbsr_p),
            hbpb_p_alt = sum(hbpb_p),
            nhbw_p_alt = sum(nhbw_p),
            nhbnw_p_alt = sum(nhbnw_p))

head(alt_block_prod) |>
  kable()

alt_block_averages <- alt_block_prod %>%
  summarise(across(c(hbw_p_alt, hbsc_p_alt, hbsr_p_alt, hbpb_p_alt, nhbw_p_alt, nhbnw_p_alt), mean, na.rm = TRUE))

print(alt_block_averages)

```

Now we can join those two tables and compare them. There are a lot of blocks that register tiny differences, so I'll define a difference as more than half a trip as a meaningful change (you can choose a different tolerance if you like). I'm also going to focus on home-based trips for the moment, since I'll be placing them on a map and the locations of non-home-based trip productions aren't based on the trip-maker's residence.

```{r}
tolerance <- 0.05

compare_prod <- full_join(base_block_prod, alt_block_prod) |>
  mutate(dif_hbw_p = (hbw_p_alt - hbw_p)/hbw_p ,
         dif_hbsc_p = (hbsc_p_alt - hbsc_p)/hbsc_p,
         dif_hbsr_p = (hbsr_p_alt - hbsr_p)/hbsc_p,
         dif_hbpb_p = (hbpb_p_alt - hbpb_p)/hbpb_p) |>
  filter(abs(dif_hbw_p) > tolerance |
         abs(dif_hbsc_p) > tolerance |
         abs(dif_hbsr_p) > tolerance |
         abs(dif_hbpb_p) > tolerance)

compare_prod <- compare_prod %>%
  mutate(dif_hbsr_p = ifelse(is.infinite(dif_hbsr_p), 1, dif_hbsr_p))

compare_prod_summary <- compare_prod %>%
  summarise(across(c(dif_hbw_p, dif_hbsc_p, dif_hbsr_p, dif_hbpb_p), 
                   list(mean = ~mean(.x, na.rm = TRUE), 
                        sd = ~sd(.x, na.rm = TRUE))))

print(compare_prod_summary)
  
```

And now let's see where these differences are on a map.

```{r}
ma_blocks <- blocks(state = "MA", 
                          year = 2010,
                          progress_bar = FALSE) |>
  st_transform("WGS84") |>
  rename(block_id = GEOID10) |>
  select(block_id)

TAZs <- here("model",
             "inputs",
             "zonal",
             "shp",
             "CTPS_TDM23_TAZ_2017g_v202303.shp") |>
  st_read(quiet = TRUE) |>
  st_transform("WGS84") |>
  mutate(block_id = as.character(taz_id)) |>
  select(block_id)

zones <- rbind(ma_blocks, TAZs)

dif_blocks_prod <- zones |>
  right_join(compare_prod) 

hb_prod_labels <- paste0(round((dif_blocks_prod$dif_hbw_p)*100),
                        "% change in HBW trips<br/>",
                        round((dif_blocks_prod$dif_hbsc_p)*100), 
                        "% change in HB-school trips<br/>",
                        round((dif_blocks_prod$dif_hbsr_p)*100),
                        "% change in HB-soc/rec trips<br/>",
                        round(dif_blocks_prod$dif_hbpb_p*100),
                         "% change in HB-personal-business") |>
  lapply(htmltools::HTML)

leaflet(dif_blocks_prod) |>
  addProviderTiles(provider = "CartoDB.Positron") |>
  addPolygons(weight = 2,
              color = "forestgreen",
              fillColor = "forestgreen",
              fillOpacity = 0.1,
              highlightOptions = highlightOptions(weight = 3,
                                                  fillOpacity = 0.5),
              label = hb_prod_labels)



```

#### GG Plot of Trip Generation Comparison

```{r}
library(ggthemes)
library(RColorBrewer)

# Load and transform block and TAZ data
ma_blocks <- blocks(state = "MA", 
                    year = 2010,
                    progress_bar = FALSE) |>
  st_transform("WGS84") |>
  rename(block_id = GEOID10) |>
  select(block_id)

TAZs <- here("model",
             "inputs",
             "zonal",
             "shp",
             "CTPS_TDM23_TAZ_2017g_v202303.shp") |>
  st_read(quiet = TRUE) |>
  st_transform("WGS84") |>
  mutate(block_id = as.character(taz_id)) |>
  select(block_id)

# Merge blocks and TAZs
zones <- rbind(ma_blocks, TAZs)

# Join with production data
dif_blocks_prod <- zones |>
  right_join(compare_prod, by = "block_id")

# Bin % change in 10% increments, capping at 100%
dif_blocks_prod <- dif_blocks_prod %>%
  mutate(hbsr_bin = cut(dif_hbsr_p * 100, 
                        breaks = c(0, seq(10, 100, by = 10), Inf), 
                        labels = c("0% to 10%", "10% to 20%", "20% to 30%", "30% to 40%", 
                                   "40% to 50%", "50% to 60%", "60% to 70%", "70% to 80%", 
                                   "80% to 90%", "90% to 100%", "100%+"), 
                        include.lowest = TRUE))

# Define color palette
color_palette <- scale_fill_manual(values = rev(RColorBrewer::brewer.pal(11, "RdYlGn")), 
                                   name = "% Change in HB-soc/rec Trips")

# Plot static ggplot map
ggplot() +
  geom_sf(data = dif_blocks_prod, aes(fill = hbsr_bin), color = NA) +
  color_palette +
  theme_minimal() +
  labs(title = "Percentage Change in Home-Based Social/Rec Trips",
       fill = "Change Category") +
  theme(legend.position = "bottom")

# Save the plot to a PDF file
ggsave("somerville_blocks_percent_change_hbsr.pdf", width = 10, height = 8)
```

### Non-home-based trip productions

```{r}
base_db <- dbConnect(drv=RSQLite::SQLite(), 
                     dbname=here("model",
                                 "outputs",
                                 "Base",
                                 "tdm23.db"))

base_trip_nhb <- dbGetQuery(base_db, 'SELECT * FROM prod_nhb')

dbDisconnect(base_db)

head(base_trip_nhb) |>
  kable()
```

```{r}
alt_db <- dbConnect(drv=RSQLite::SQLite(), 
                     dbname=here("model",
                                 "outputs",
                                 "UBI-1",
                                 "tdm23.db"))

alt_trip_nhb <- dbGetQuery(alt_db, 'SELECT * FROM prod_nhb') |>
  rename_with(~ paste0("alt_", .x),
              ends_with("_p")) 

dbDisconnect(alt_db)

compare_nhb <- full_join(base_trip_nhb, alt_trip_nhb) |>
  mutate(diff_nhbw_p = alt_nhbw_p - nhbw_p,
         diff_nhbnw_p = alt_nhbnw_p - nhbnw_p) |>
  filter(abs(diff_nhbw_p) > tolerance |
           abs(diff_nhbnw_p) > tolerance)
```

```{r}
dif_blocks_nhb <- zones |>
  right_join(compare_nhb) 

nhb_labels <- paste0(formatC(dif_blocks_nhb$diff_nhbw_p, format = "f", digits = 2),
                        " non-home-based work trips<br/>",
                      formatC(dif_blocks_nhb$diff_nhbnw_p, format = "f", digits = 2),
                        " change in non-home-based non-work trips") |>
  lapply(htmltools::HTML)

leaflet(dif_blocks_nhb) |>
  addProviderTiles(provider = "CartoDB.Positron") |>
  addPolygons(weight = 2,
              color = "forestgreen",
              fillColor = "forestgreen",
              fillOpacity = 0.1,
              highlightOptions = highlightOptions(weight = 3,
                                                  fillOpacity = 0.5),
              label = nhb_labels)
```

### Showing Map of Income Changed Per Zone

```{r}
TAZs <- here("model",
             "inputs",
             "zonal",
             "shp",
             "CTPS_TDM23_TAZ_2017g_v202303.shp") |>
  st_read(quiet = TRUE) |>
  st_transform("WGS84")

somerville_TAZs <- TAZs |>
  filter(town %in% c("SOMERVILLE"))

somerville_blocks <-blocks(state="MA",
                           county="Middlesex",
                           year = 2010,
                           progress_bar= FALSE) |>
  st_transform("WGS84") |>
  st_filter(somerville_TAZs)

MA_pop <- here("model",
               "inputs",
               "zonal",
               "ma_population_run97-176_2019_v20240109.csv") |>
  read_csv(show_col_types = FALSE) |>
  mutate(block_id = as.double(block_id))

MA_pop <- MA_pop %>%
  mutate(unique_id = paste(hid, person_num, sep = "_"))

somerville_pop <- MA_pop %>%
  filter(block_id %in% somerville_blocks$GEOID10)

somerville_pop <- somerville_pop %>%
  rename(orig_wage_inc = wage_inc, orig_hh_inc = hh_inc)

somerville_pop_ubi_one <- here("model",
               "inputs",
               "zonal",
               "somerville_pop_ubi_one.csv") |>
  read_csv(show_col_types = FALSE)

somerville_pop_ubi_one <- somerville_pop_ubi_one %>%
  mutate(unique_id = paste(hid, person_num, sep = "_"))

somerville_pop_ubi_one <- somerville_pop_ubi_one %>%
  left_join(somerville_pop %>% select(unique_id, orig_wage_inc, orig_hh_inc), by = "unique_id")

somerville_pop_ubi_one <- somerville_pop_ubi_one %>%
  mutate(hh_inc_percent_change = ((hh_inc - orig_hh_inc) / orig_hh_inc) * 100) %>%
  mutate(hh_inc_percent_change = ifelse(is.infinite(hh_inc_percent_change), 100, hh_inc_percent_change))


# Step 1: Aggregate to Household Level
somerville_households <- somerville_pop_ubi_one %>%
  group_by(hid) %>%  # Assuming hh_id is the unique household identifier
  summarise(hh_inc_percent_change = mean(hh_inc_percent_change, na.rm = TRUE),
            block_id = first(block_id))  # Retain block_id for the next step

# Step 2: Aggregate to Block Level and Count Households
somerville_blocks <- somerville_households %>%
  group_by(block_id) %>%
  summarise(avg_percent_change = mean(hh_inc_percent_change, na.rm = TRUE),
            household_count = n())  # Count unique households in each block

# Count rows where percent_change is Inf
inf_count <- sum(is.infinite(somerville_pop_ubi_one$hh_inc_percent_change))

# Print the result
inf_count

somerville_blocks_geo <- blocks(state = "MA", 
                          county = "Middlesex", 
                          year = 2010,
                          progress_bar = FALSE) |>
  st_transform("WGS84") |>
  st_filter(somerville_TAZs)

somerville_blocks <- somerville_blocks %>%
  rename(GEOID10 = block_id) %>%
  mutate(GEOID10 = as.character(GEOID10))

somerville_blocks_total <- somerville_blocks_geo %>%
  left_join(somerville_blocks, by = "GEOID10")

summary_stats <- somerville_blocks_total %>%
  summarize(
    avg_percent_change_mean = mean(avg_percent_change, na.rm = TRUE),
    avg_percent_change_sd = sd(avg_percent_change, na.rm = TRUE)
  )

# Print the results
print(summary_stats)

somerville_blocks_total <- somerville_blocks_total %>%
  mutate(percent_change_bucket = case_when(
    avg_percent_change >= 0   & avg_percent_change < 10   ~ "0-10%",
    avg_percent_change >= 10  & avg_percent_change < 20   ~ "10-20%",
    avg_percent_change >= 20  & avg_percent_change < 30   ~ "20-30%",
    avg_percent_change >= 30  & avg_percent_change < 40   ~ "30-40%",
    avg_percent_change >= 40  & avg_percent_change < 50   ~ "40-50%",
    avg_percent_change >= 50  & avg_percent_change < 60   ~ "50-60%",
    avg_percent_change >= 60  & avg_percent_change < 70   ~ "60-70%",
    avg_percent_change >= 70  & avg_percent_change < 80   ~ "70-80%",
    avg_percent_change >= 80  & avg_percent_change < 90   ~ "80-90%",
    avg_percent_change >= 90  & avg_percent_change < 100  ~ "90-100%",
    avg_percent_change >= 100                           ~ "100% and above"
  ))



somerville_blocks_total <- somerville_blocks_total %>%
  mutate(percent_change_bucket = factor(percent_change_bucket, levels = c(
    "0-10%", "10-20%", "20-30%", "30-40%", "40-50%", 
    "50-60%", "60-70%", "70-80%", "80-90%", "90-100%", "100% and above"
  )))

# Define color palette with explicit category ordering
pal <- colorFactor(
  palette = "YlGnBu",  # Yellow-Green-Blue color scale
  domain = somerville_blocks_total$percent_change_bucket,
  na.color = "transparent"
)

# Create the Leaflet map
leaflet(somerville_blocks_total) %>%
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(
    fillColor = ~ifelse(is.na(percent_change_bucket), "transparent", pal(percent_change_bucket)),  
    weight = 1,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = ~ifelse(is.na(percent_change_bucket), 0, 0.7),  # Make NA blocks fully transparent
    popup = ~paste(
      "Block GEOID10:", GEOID10, "<br>",
      "Avg Percent Change:", ifelse(is.na(avg_percent_change), "No Data", round(avg_percent_change, 2)), "%", "<br>",
      "Household Count:", ifelse(is.na(household_count), "No Data", household_count)
    )  # Updated popup to handle NA values
  ) %>%
  addLegend(
    "bottomright",
    pal = pal,
    values = somerville_blocks_total$percent_change_bucket,  # Use explicitly ordered factor
    title = "Avg Percent Change",
    opacity = 1
  )


# Ensure your data is in the `sf` format
somerville_blocks_total_sf <- st_as_sf(somerville_blocks_total, 
                                       coords = c("longitude_column", "latitude_column"),  # replace with your actual coordinates
                                       crs = 4326)  # Set CRS (coordinate reference system)

# Explicitly order percent_change_bucket for the map
somerville_blocks_total_sf <- somerville_blocks_total_sf %>%
  mutate(percent_change_bucket = factor(percent_change_bucket, levels = c(
    "0-10%", "10-20%", "20-30%", "30-40%", "40-50%", 
    "50-60%", "60-70%", "70-80%", "80-90%", "90-100%", "100% and above"
  )))

# Plot with ggplot2
ggplot(somerville_blocks_total_sf) +
  geom_sf(aes(fill = percent_change_bucket), color = "white", size = 0.2) +
  scale_fill_viridis(
    discrete = TRUE,  # Using discrete scale since we have categories
    option = "YlGnBu",  # Yellow-Green-Blue color scale
    na.value = "transparent",  # Make NA values transparent
    name = "Avg Percent Change"
  ) +
  theme_minimal() +
  labs(
    title = "Somerville Blocks: Avg Percent Change"
  ) +
  theme(
    axis.title = element_blank(),  # Remove axis titles
    axis.text = element_blank(),   # Remove axis labels
    axis.ticks = element_blank(),  # Remove axis ticks
    legend.position = "bottom",    # Position the legend at the bottom
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8)
  )

# Save the plot to a PNG file
ggsave("somerville_blocks_map_with_legend_no_axes.png", width = 10, height = 8, dpi = 300)

# Save the plot to a PDF file
ggsave("somerville_blocks_map_with_legend_no_axes.pdf", width = 10, height = 8)

```
